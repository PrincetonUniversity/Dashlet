{"version":3,"sources":["../../../../src/streaming/FragmentLoader.js"],"names":["FragmentLoader","config","context","eventBus","events","urlUtils","errors","instance","urlLoader","setup","create","errHandler","dashMetrics","mediaPlayerModel","requestModifier","useFetch","settings","get","streaming","lowLatencyEnabled","constants","Constants","boxParser","dashConstants","checkForExistence","request","report","success","trigger","CHECK_FOR_EXISTENCE_COMPLETED","exists","headRequest","HeadRequest","url","load","error","data","LOADING_COMPLETED","response","sender","progress","event","LOADING_PROGRESS","stream","LOADING_DATA_PROGRESS","statusText","errorText","undefined","DashJSError","FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE","abort","LOADING_ABANDONED","mediaType","FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE","FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE","reset","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"sEA8BA,gD,mDACA,0C,mDACA,6C,uDACA,6C,uDACA,kD,4IAEA,QAASA,eAAT,CAAwBC,MAAxB,CAAgC,CAE5BA,OAASA,QAAU,EAAnB,CACA,GAAMC,SAAU,KAAKA,OAArB,CACA,GAAMC,UAAWF,OAAOE,QAAxB,CACA,GAAMC,QAASH,OAAOG,MAAtB,CACA,GAAMC,UAAWJ,OAAOI,QAAxB,CACA,GAAMC,QAASL,OAAOK,MAAtB,CAEA,GAAIC,gBAAJ,CACIC,gBADJ,CAGA,QAASC,MAAT,EAAiB,CACbD,UAAY,wBAAUN,OAAV,EAAmBQ,MAAnB,CAA0B,CAClCC,WAAYV,OAAOU,UADe,CAElCL,OAAQA,MAF0B,CAGlCM,YAAaX,OAAOW,WAHc,CAIlCC,iBAAkBZ,OAAOY,gBAJS,CAKlCC,gBAAiBb,OAAOa,eALU,CAMlCC,SAAUd,OAAOe,QAAP,CAAgBC,GAAhB,GAAsBC,SAAtB,CAAgCC,iBANR,CAOlCd,SAAUA,QAPwB,CAQlCe,UAAWC,mBARuB,CASlCC,UAAWrB,OAAOqB,SATgB,CAUlCC,cAAetB,OAAOsB,aAVY,CAA1B,CAAZ,CAYH,CAED,QAASC,kBAAT,CAA2BC,OAA3B,CAAoC,CAChC,GAAMC,QAAS,QAATA,OAAS,CAAUC,OAAV,CAAmB,CAC9BxB,SAASyB,OAAT,CACIxB,OAAOyB,6BADX,CAC0C,CAClCJ,QAASA,OADyB,CAElCK,OAAQH,OAF0B,CAD1C,EAMH,CAPD,CASA,GAAIF,OAAJ,CAAa,CACT,GAAIM,aAAc,GAAIC,sBAAJ,CAAgBP,QAAQQ,GAAxB,CAAlB,CACAzB,UAAU0B,IAAV,CAAe,CACXT,QAASM,WADE,CAEXJ,QAAS,kBAAY,CACjBD,OAAO,IAAP,EACH,CAJU,CAKXS,MAAO,gBAAY,CACfT,OAAO,KAAP,EACH,CAPU,CAAf,EASH,CAXD,IAWO,CACHA,OAAO,KAAP,EACH,CACJ,CAED,QAASQ,KAAT,CAAcT,OAAd,CAAuB,CACnB,GAAMC,QAAS,QAATA,OAAS,CAAUU,IAAV,CAAgBD,KAAhB,CAAuB,CAClChC,SAASyB,OAAT,CAAiBxB,OAAOiC,iBAAxB,CAA2C,CACvCZ,QAASA,OAD8B,CAEvCa,SAAUF,MAAQ,IAFqB,CAGvCD,MAAOA,OAAS,IAHuB,CAIvCI,OAAQhC,QAJ+B,CAA3C,EAMH,CAPD,CASA,GAAIkB,OAAJ,CAAa,CACTjB,UAAU0B,IAAV,CAAe,CACXT,QAASA,OADE,CAEXe,SAAU,kBAAUC,KAAV,CAAiB,CACvBtC,SAASyB,OAAT,CAAiBxB,OAAOsC,gBAAxB,CAA0C,CACtCjB,QAASA,OAD6B,CAEtCkB,OAAQF,MAAME,MAFwB,CAA1C,EAIA,GAAIF,MAAML,IAAV,CAAgB,CACZjC,SAASyB,OAAT,CAAiBxB,OAAOwC,qBAAxB,CAA+C,CAC3CnB,QAASA,OADkC,CAE3Ca,SAAUG,MAAML,IAAN,EAAc,IAFmB,CAG3CD,MAAO,IAHoC,CAI3CI,OAAQhC,QAJmC,CAA/C,EAMH,CACJ,CAfU,CAgBXoB,QAAS,iBAAUS,IAAV,CAAgB,CACrBV,OAAOU,IAAP,EACH,CAlBU,CAmBXD,MAAO,eAAUV,OAAV,CAAmBoB,UAAnB,CAA+BC,SAA/B,CAA0C,CAC7CpB,OACIqB,SADJ,CAEI,GAAIC,sBAAJ,CACI1C,OAAO2C,0CADX,CAEIH,SAFJ,CAGID,UAHJ,CAFJ,EAQH,CA5BU,CA6BXK,MAAO,eAAUzB,OAAV,CAAmB,CACtB,GAAIA,OAAJ,CAAa,CACTtB,SAASyB,OAAT,CAAiBxB,OAAO+C,iBAAxB,CAA2C,CAAC1B,QAASA,OAAV,CAAmB2B,UAAW3B,QAAQ2B,SAAtC,CAAiDb,OAAQhC,QAAzD,CAA3C,EACH,CACJ,CAjCU,CAAf,EAmCH,CApCD,IAoCO,CACHmB,OACIqB,SADJ,CAEI,GAAIC,sBAAJ,CACI1C,OAAO+C,uCADX,CAEI/C,OAAOgD,0CAFX,CAFJ,EAOH,CACJ,CAED,QAASJ,MAAT,EAAiB,CACb,GAAI1C,SAAJ,CAAe,CACXA,UAAU0C,KAAV,GACH,CACJ,CAED,QAASK,MAAT,EAAiB,CACb,GAAI/C,SAAJ,CAAe,CACXA,UAAU0C,KAAV,GACA1C,UAAY,IAAZ,CACH,CACJ,CAEDD,SAAW,CACPiB,kBAAmBA,iBADZ,CAEPU,KAAMA,IAFC,CAGPgB,MAAOA,KAHA,CAIPK,MAAOA,KAJA,CAAX,CAOA9C,QAEA,MAAOF,SAAP,CACH,CAzKD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2KAP,eAAewD,qBAAf,CAAuC,gBAAvC,C,gBACeC,uBAAaC,eAAb,CAA6B1D,cAA7B,C","file":"FragmentLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport URLLoader from './net/URLLoader';\nimport HeadRequest from './vo/HeadRequest';\nimport DashJSError from './vo/DashJSError';\nimport FactoryMaker from '../core/FactoryMaker';\n\nfunction FragmentLoader(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const urlUtils = config.urlUtils;\n    const errors = config.errors;\n\n    let instance,\n        urlLoader;\n\n    function setup() {\n        urlLoader = URLLoader(context).create({\n            errHandler: config.errHandler,\n            errors: errors,\n            dashMetrics: config.dashMetrics,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier,\n            useFetch: config.settings.get().streaming.lowLatencyEnabled,\n            urlUtils: urlUtils,\n            constants: Constants,\n            boxParser: config.boxParser,\n            dashConstants: config.dashConstants\n        });\n    }\n\n    function checkForExistence(request) {\n        const report = function (success) {\n            eventBus.trigger(\n                events.CHECK_FOR_EXISTENCE_COMPLETED, {\n                    request: request,\n                    exists: success\n                }\n            );\n        };\n\n        if (request) {\n            let headRequest = new HeadRequest(request.url);\n            urlLoader.load({\n                request: headRequest,\n                success: function () {\n                    report(true);\n                },\n                error: function () {\n                    report(false);\n                }\n            });\n        } else {\n            report(false);\n        }\n    }\n\n    function load(request) {\n        const report = function (data, error) {\n            eventBus.trigger(events.LOADING_COMPLETED, {\n                request: request,\n                response: data || null,\n                error: error || null,\n                sender: instance\n            });\n        };\n\n        if (request) {\n            urlLoader.load({\n                request: request,\n                progress: function (event) {\n                    eventBus.trigger(events.LOADING_PROGRESS, {\n                        request: request,\n                        stream: event.stream\n                    });\n                    if (event.data) {\n                        eventBus.trigger(events.LOADING_DATA_PROGRESS, {\n                            request: request,\n                            response: event.data || null,\n                            error: null,\n                            sender: instance\n                        });\n                    }\n                },\n                success: function (data) {\n                    report(data);\n                },\n                error: function (request, statusText, errorText) {\n                    report(\n                        undefined,\n                        new DashJSError(\n                            errors.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE,\n                            errorText,\n                            statusText\n                        )\n                    );\n                },\n                abort: function (request) {\n                    if (request) {\n                        eventBus.trigger(events.LOADING_ABANDONED, {request: request, mediaType: request.mediaType, sender: instance});\n                    }\n                }\n            });\n        } else {\n            report(\n                undefined,\n                new DashJSError(\n                    errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE,\n                    errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE\n                )\n            );\n        }\n    }\n\n    function abort() {\n        if (urlLoader) {\n            urlLoader.abort();\n        }\n    }\n\n    function reset() {\n        if (urlLoader) {\n            urlLoader.abort();\n            urlLoader = null;\n        }\n    }\n\n    instance = {\n        checkForExistence: checkForExistence,\n        load: load,\n        abort: abort,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nFragmentLoader.__dashjs_factory_name = 'FragmentLoader';\nexport default FactoryMaker.getClassFactory(FragmentLoader);\n"]}