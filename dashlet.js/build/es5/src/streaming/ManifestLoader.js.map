{"version":3,"sources":["../../../../src/streaming/ManifestLoader.js"],"names":["ManifestLoader","config","context","debug","eventBus","getInstance","urlUtils","instance","logger","urlLoader","xlinkController","parser","mssHandler","errHandler","setup","getLogger","on","Events","XLINK_READY","onXlinkReady","create","dashMetrics","mediaPlayerModel","requestModifier","useFetch","settings","get","streaming","lowLatencyEnabled","constants","Constants","dashConstants","DashConstants","errors","Errors","event","trigger","INTERNAL_MANIFEST_LOADED","manifest","createParser","data","indexOf","createMssParser","registerEvents","load","url","request","TextRequest","HTTPRequest","MPD_TYPE","success","textStatus","responseURL","actualUrl","baseUri","parseBaseUrl","isRelative","resolve","window","location","href","error","DashJSError","MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE","MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE","setMatchers","getMatchers","setIron","getIron","parse","e","originalUrl","hasOwnProperty","LOCATION","Location_asArray","loadedTime","Date","resolveManifestOnLoad","ORIGINAL_MANIFEST_LOADED","originalManifest","statusText","errorText","MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE","MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE","reset","off","abort","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"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","file":"ManifestLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport DashConstants from '../dash/constants/DashConstants';\nimport XlinkController from './controllers/XlinkController';\nimport URLLoader from './net/URLLoader';\nimport URLUtils from './utils/URLUtils';\nimport TextRequest from './vo/TextRequest';\nimport DashJSError from './vo/DashJSError';\nimport {HTTPRequest} from './vo/metrics/HTTPRequest';\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport Errors from '../core/errors/Errors';\nimport FactoryMaker from '../core/FactoryMaker';\nimport DashParser from '../dash/parser/DashParser';\n\nfunction ManifestLoader(config) {\n\n    config = config || {};\n    const context = this.context;\n    const debug = config.debug;\n    const eventBus = EventBus(context).getInstance();\n    const urlUtils = URLUtils(context).getInstance();\n\n    let instance,\n        logger,\n        urlLoader,\n        xlinkController,\n        parser;\n\n    let mssHandler = config.mssHandler;\n    let errHandler = config.errHandler;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        eventBus.on(Events.XLINK_READY, onXlinkReady, instance);\n\n        urlLoader = URLLoader(context).create({\n            errHandler: config.errHandler,\n            dashMetrics: config.dashMetrics,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier,\n            useFetch: config.settings.get().streaming.lowLatencyEnabled,\n            urlUtils: urlUtils,\n            constants: Constants,\n            dashConstants: DashConstants,\n            errors: Errors\n        });\n\n        xlinkController = XlinkController(context).create({\n            errHandler: errHandler,\n            dashMetrics: config.dashMetrics,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier,\n            settings: config.settings\n        });\n\n        parser = null;\n    }\n\n    function onXlinkReady(event) {\n        eventBus.trigger(\n            Events.INTERNAL_MANIFEST_LOADED, {\n                manifest: event.manifest\n            }\n        );\n    }\n\n    function createParser(data) {\n        let parser = null;\n        // Analyze manifest content to detect protocol and select appropriate parser\n        if (data.indexOf('SmoothStreamingMedia') > -1) {\n            //do some business to transform it into a Dash Manifest\n            if (mssHandler) {\n                parser = mssHandler.createMssParser();\n                mssHandler.registerEvents();\n            }\n            return parser;\n        } else if (data.indexOf('MPD') > -1) {\n            return DashParser(context).create({debug: debug});\n        } else {\n            return parser;\n        }\n    }\n\n    function load(url) {\n\n        const request = new TextRequest(url, HTTPRequest.MPD_TYPE);\n\n        urlLoader.load({\n            request: request,\n            success: function (data, textStatus, responseURL) {\n                // Manage situations in which success is called after calling reset\n                if (!xlinkController) return;\n\n                let actualUrl,\n                    baseUri,\n                    manifest;\n\n                // Handle redirects for the MPD - as per RFC3986 Section 5.1.3\n                // also handily resolves relative MPD URLs to absolute\n                if (responseURL && responseURL !== url) {\n                    baseUri = urlUtils.parseBaseUrl(responseURL);\n                    actualUrl = responseURL;\n                } else {\n                    // usually this case will be caught and resolved by\n                    // responseURL above but it is not available for IE11 and Edge/12 and Edge/13\n                    // baseUri must be absolute for BaseURL resolution later\n                    if (urlUtils.isRelative(url)) {\n                        url = urlUtils.resolve(url, window.location.href);\n                    }\n\n                    baseUri = urlUtils.parseBaseUrl(url);\n                }\n\n                // Create parser according to manifest type\n                if (parser === null) {\n                    parser = createParser(data);\n                }\n\n                if (parser === null) {\n                    eventBus.trigger(\n                        Events.INTERNAL_MANIFEST_LOADED, {\n                            manifest: null,\n                            error: new DashJSError(\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\n                            )\n                        }\n                    );\n                    return;\n                }\n\n                // init xlinkcontroller with matchers and iron object from created parser\n                xlinkController.setMatchers(parser.getMatchers());\n                xlinkController.setIron(parser.getIron());\n\n                try {\n                    manifest = parser.parse(data);\n                } catch (e) {\n                    eventBus.trigger(\n                        Events.INTERNAL_MANIFEST_LOADED, {\n                            manifest: null,\n                            error: new DashJSError(\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\n                           )\n                        }\n                    );\n                    return;\n                }\n\n                if (manifest) {\n                    manifest.url = actualUrl || url;\n\n                    // URL from which the MPD was originally retrieved (MPD updates will not change this value)\n                    if (!manifest.originalUrl) {\n                        manifest.originalUrl = manifest.url;\n                    }\n\n                    // In the following, we only use the first Location entry even if many are available\n                    // Compare with ManifestUpdater/DashManifestModel\n                    if (manifest.hasOwnProperty(Constants.LOCATION)) {\n                        baseUri = urlUtils.parseBaseUrl(manifest.Location_asArray[0]);\n                        logger.debug('BaseURI set by Location to: ' + baseUri);\n                    }\n\n                    manifest.baseUri = baseUri;\n                    manifest.loadedTime = new Date();\n                    xlinkController.resolveManifestOnLoad(manifest);\n\n                    eventBus.trigger(\n                        Events.ORIGINAL_MANIFEST_LOADED, {\n                            originalManifest: data\n                        }\n                    );\n                } else {\n                    eventBus.trigger(\n                        Events.INTERNAL_MANIFEST_LOADED, {\n                            manifest: null,\n                            error: new DashJSError(\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,\n                                Errors.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + `${url}`\n                            )\n                        }\n                    );\n                }\n            },\n            error: function (request, statusText, errorText) {\n                eventBus.trigger(\n                    Events.INTERNAL_MANIFEST_LOADED, {\n                        manifest: null,\n                        error: new DashJSError(\n                            Errors.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE,\n                            Errors.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE + `${url}, ${errorText}`\n                        )\n                    }\n                );\n            }\n        });\n    }\n\n    function reset() {\n        eventBus.off(Events.XLINK_READY, onXlinkReady, instance);\n\n        if (xlinkController) {\n            xlinkController.reset();\n            xlinkController = null;\n        }\n\n        if (urlLoader) {\n            urlLoader.abort();\n            urlLoader = null;\n        }\n\n        if (mssHandler) {\n            mssHandler.reset();\n        }\n    }\n\n    instance = {\n        load: load,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nManifestLoader.__dashjs_factory_name = 'ManifestLoader';\n\nconst factory = FactoryMaker.getClassFactory(ManifestLoader);\nexport default factory;\n"]}