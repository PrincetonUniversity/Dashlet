{"version":3,"sources":["../../../../../src/streaming/controllers/MediaController.js"],"names":["TRACK_SWITCH_MODE_NEVER_REPLACE","TRACK_SWITCH_MODE_ALWAYS_REPLACE","TRACK_SELECTION_MODE_HIGHEST_BITRATE","TRACK_SELECTION_MODE_WIDEST_RANGE","DEFAULT_INIT_TRACK_SELECTION_MODE","MediaController","context","eventBus","getInstance","instance","logger","tracks","initialSettings","selectionMode","switchMode","domStorage","validTrackSwitchModes","validTrackSelectionModes","setup","getLogger","reset","checkInitialMediaSettingsForType","type","streamInfo","settings","getInitialSettings","tracksForType","getTracksFor","getSavedMediaSettings","setInitialSettings","length","forEach","track","matchSettings","push","setTrack","selectInitialTrack","addTrack","mediaType","isMultiTrackSupportedByType","streamId","id","createTrackInfo","mediaTracks","list","i","len","isTracksEqual","initSettings","getCurrentTrackFor","current","isCurrentTrack","noSettingsSave","Constants","FRAGMENTED_TEXT","trigger","Events","CURRENT_TRACK_CHANGED","oldMediaInfo","newMediaInfo","extractSettings","storeLastSettings","roles","role","accessibility","audioChannelConfiguration","setSavedMediaSettings","value","saveTextSettingsDisabled","setSwitchMode","mode","isModeSupported","indexOf","warn","getSwitchMode","setSelectionModeForInitialTrack","getSelectionModeForInitialTrack","AUDIO","VIDEO","TEXT","IMAGE","t1","t2","sameId","sameViewpoint","viewpoint","sameLang","lang","sameRoles","toString","sameAccessibility","sameAudioChannelConfiguration","setConfig","config","resetInitialSettings","resetSwitchMode","mediaInfo","notEmpty","matchLang","match","matchViewPoint","matchRole","filter","item","matchAccessibility","matchAudioChannelConfiguration","audio","video","fragmentedText","tmpArr","getTracksWithHighestBitrate","trackArr","max","result","tmp","Math","apply","bitrateList","map","obj","bandwidth","getTracksWithWidestRange","representationCount","text","image","__dashjs_factory_name","factory","FactoryMaker","getSingletonFactory","updateSingletonFactory"],"mappings":"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","file":"MediaController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport Events from '../../core/events/Events';\nimport EventBus from '../../core/EventBus';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nconst TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\nconst TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\nconst TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\nconst TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\nconst DEFAULT_INIT_TRACK_SELECTION_MODE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;\n\nfunction MediaController() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        logger,\n        tracks,\n        initialSettings,\n        selectionMode,\n        switchMode,\n        domStorage;\n\n    const validTrackSwitchModes = [\n        TRACK_SWITCH_MODE_ALWAYS_REPLACE,\n        TRACK_SWITCH_MODE_NEVER_REPLACE\n    ];\n\n    const validTrackSelectionModes = [\n        TRACK_SELECTION_MODE_HIGHEST_BITRATE,\n        TRACK_SELECTION_MODE_WIDEST_RANGE\n    ];\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        reset();\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @memberof MediaController#\n     */\n    function checkInitialMediaSettingsForType(type, streamInfo) {\n        let settings = getInitialSettings(type);\n        const tracksForType = getTracksFor(type, streamInfo);\n        const tracks = [];\n\n        if (!settings) {\n            settings = domStorage.getSavedMediaSettings(type);\n            setInitialSettings(type, settings);\n        }\n\n        if (!tracksForType || (tracksForType.length === 0)) return;\n\n        if (settings) {\n            tracksForType.forEach(function (track) {\n                if (matchSettings(settings, track)) {\n                    tracks.push(track);\n                }\n            });\n        }\n\n        if (tracks.length === 0) {\n            setTrack(selectInitialTrack(type, tracksForType), true);\n        } else {\n            if (tracks.length > 1) {\n                setTrack(selectInitialTrack(type, tracks));\n            } else {\n                setTrack(tracks[0]);\n            }\n        }\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @memberof MediaController#\n     */\n    function addTrack(track) {\n        if (!track) return;\n\n        const mediaType = track.type;\n        if (!isMultiTrackSupportedByType(mediaType)) return;\n\n        let streamId = track.streamInfo.id;\n        if (!tracks[streamId]) {\n            tracks[streamId] = createTrackInfo();\n        }\n\n        const mediaTracks = tracks[streamId][mediaType].list;\n        for (let i = 0, len = mediaTracks.length; i < len; ++i) {\n            //track is already set.\n            if (isTracksEqual(mediaTracks[i], track)) {\n                return;\n            }\n        }\n\n        mediaTracks.push(track);\n\n        let initSettings = getInitialSettings(mediaType);\n        if (initSettings && (matchSettings(initSettings, track)) && !getCurrentTrackFor(mediaType, track.streamInfo)) {\n            setTrack(track);\n        }\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @returns {Array}\n     * @memberof MediaController#\n     */\n    function getTracksFor(type, streamInfo) {\n        if (!type || !streamInfo) return [];\n\n        const id = streamInfo.id;\n\n        if (!tracks[id] || !tracks[id][type]) return [];\n\n        return tracks[id][type].list;\n    }\n\n    /**\n     * @param {string} type\n     * @param {StreamInfo} streamInfo\n     * @returns {Object|null}\n     * @memberof MediaController#\n     */\n    function getCurrentTrackFor(type, streamInfo) {\n        if (!type || !streamInfo || (streamInfo && !tracks[streamInfo.id])) return null;\n        return tracks[streamInfo.id][type].current;\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isCurrentTrack(track) {\n        if (!track) {\n            return false;\n        }\n        const type = track.type;\n        const id = track.streamInfo.id;\n\n        return (tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current, track));\n    }\n\n    /**\n     * @param {MediaInfo} track\n     * @param {boolean} noSettingsSave specify if settings must be not be saved\n     * @memberof MediaController#\n     */\n    function setTrack(track, noSettingsSave) {\n        if (!track || !track.streamInfo) return;\n\n        const type = track.type;\n        const streamInfo = track.streamInfo;\n        const id = streamInfo.id;\n        const current = getCurrentTrackFor(type, streamInfo);\n\n        if (!tracks[id] || !tracks[id][type] || isTracksEqual(track, current)) return;\n\n        tracks[id][type].current = track;\n\n        if (tracks[id][type].current && !(noSettingsSave && type === Constants.FRAGMENTED_TEXT)) {\n            eventBus.trigger(Events.CURRENT_TRACK_CHANGED, {oldMediaInfo: current, newMediaInfo: track, switchMode: switchMode[type]});\n        }\n\n        if (!noSettingsSave) {\n\n            let settings = extractSettings(track);\n\n            if (!settings || !tracks[id][type].storeLastSettings) return;\n\n            if (settings.roles) {\n                settings.role = settings.roles[0];\n                delete settings.roles;\n            }\n\n            if (settings.accessibility) {\n                settings.accessibility = settings.accessibility[0];\n            }\n\n            if (settings.audioChannelConfiguration) {\n                settings.audioChannelConfiguration = settings.audioChannelConfiguration[0];\n            }\n\n            domStorage.setSavedMediaSettings(type, settings);\n        }\n    }\n\n    /**\n     * @param {string} type\n     * @param {Object} value\n     * @memberof MediaController#\n     */\n    function setInitialSettings(type, value) {\n        if (!type || !value) return;\n\n        initialSettings[type] = value;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {Object|null}\n     * @memberof MediaController#\n     */\n    function getInitialSettings(type) {\n        if (!type) return null;\n\n        return initialSettings[type];\n    }\n\n    /**\n     * @memberof MediaController#\n     */\n    function saveTextSettingsDisabled() {\n        domStorage.setSavedMediaSettings(Constants.FRAGMENTED_TEXT, null);\n    }\n\n    /**\n     * @param {string} type\n     * @param {string} mode\n     * @memberof MediaController#\n     */\n    function setSwitchMode(type, mode) {\n        const isModeSupported = (validTrackSwitchModes.indexOf(mode) !== -1);\n\n        if (!isModeSupported) {\n            logger.warn('Track switch mode is not supported: ' + mode);\n            return;\n        }\n\n        switchMode[type] = mode;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {string} mode\n     * @memberof MediaController#\n     */\n    function getSwitchMode(type) {\n        return switchMode[type];\n    }\n\n    /**\n     * @param {string} mode\n     * @memberof MediaController#\n     */\n    function setSelectionModeForInitialTrack(mode) {\n        const isModeSupported = (validTrackSelectionModes.indexOf(mode) !== -1);\n\n        if (!isModeSupported) {\n            logger.warn('Track selection mode is not supported: ' + mode);\n            return;\n        }\n        selectionMode = mode;\n    }\n\n    /**\n     * @returns {string} mode\n     * @memberof MediaController#\n     */\n    function getSelectionModeForInitialTrack() {\n        return selectionMode || DEFAULT_INIT_TRACK_SELECTION_MODE;\n    }\n\n    /**\n     * @param {string} type\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isMultiTrackSupportedByType(type) {\n        return (type === Constants.AUDIO || type === Constants.VIDEO || type === Constants.TEXT ||\n            type === Constants.FRAGMENTED_TEXT || type === Constants.IMAGE);\n    }\n\n    /**\n     * @param {MediaInfo} t1 - first track to compare\n     * @param {MediaInfo} t2 - second track to compare\n     * @returns {boolean}\n     * @memberof MediaController#\n     */\n    function isTracksEqual(t1, t2) {\n        if (!t1 && !t2) {\n            return true;\n        }\n\n        if (!t1 || !t2) {\n            return false;\n        }\n\n        const sameId = t1.id === t2.id;\n        const sameViewpoint = t1.viewpoint === t2.viewpoint;\n        const sameLang = t1.lang === t2.lang;\n        const sameRoles = t1.roles.toString() === t2.roles.toString();\n        const sameAccessibility = t1.accessibility.toString() === t2.accessibility.toString();\n        const sameAudioChannelConfiguration = t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();\n\n        return (sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration);\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.domStorage) {\n            domStorage = config.domStorage;\n        }\n    }\n\n    /**\n     * @memberof MediaController#\n     */\n    function reset() {\n        tracks = {};\n        resetInitialSettings();\n        resetSwitchMode();\n    }\n\n    function extractSettings(mediaInfo) {\n        const settings = {\n            lang: mediaInfo.lang,\n            viewpoint: mediaInfo.viewpoint,\n            roles: mediaInfo.roles,\n            accessibility: mediaInfo.accessibility,\n            audioChannelConfiguration: mediaInfo.audioChannelConfiguration\n        };\n        let notEmpty = settings.lang || settings.viewpoint || (settings.role && settings.role.length > 0) ||\n        (settings.accessibility && settings.accessibility.length > 0) || (settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0);\n\n        return notEmpty ? settings : null;\n    }\n\n    function matchSettings(settings, track) {\n        const matchLang = !settings.lang || (track.lang.match(settings.lang));\n        const matchViewPoint = !settings.viewpoint || (settings.viewpoint === track.viewpoint);\n        const matchRole = !settings.role || !!track.roles.filter(function (item) {\n            return item === settings.role;\n        })[0];\n        let matchAccessibility = !settings.accessibility || !!track.accessibility.filter(function (item) {\n            return item === settings.accessibility;\n        })[0];\n        let matchAudioChannelConfiguration = !settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function (item) {\n            return item === settings.audioChannelConfiguration;\n        })[0];\n\n        return (matchLang && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration);\n    }\n\n    function resetSwitchMode() {\n        switchMode = {\n            audio: TRACK_SWITCH_MODE_ALWAYS_REPLACE,\n            video: TRACK_SWITCH_MODE_NEVER_REPLACE\n        };\n    }\n\n    function resetInitialSettings() {\n        initialSettings = {\n            audio: null,\n            video: null,\n            fragmentedText: null\n        };\n    }\n\n    function selectInitialTrack(type, tracks) {\n        if (type === Constants.FRAGMENTED_TEXT) return tracks[0];\n\n        let mode = getSelectionModeForInitialTrack();\n        let tmpArr = [];\n\n        const getTracksWithHighestBitrate = function (trackArr) {\n            let max = 0;\n            let result = [];\n            let tmp;\n\n            trackArr.forEach(function (track) {\n                tmp = Math.max.apply(Math, track.bitrateList.map(function (obj) { return obj.bandwidth; }));\n\n                if (tmp > max) {\n                    max = tmp;\n                    result = [track];\n                } else if (tmp === max) {\n                    result.push(track);\n                }\n            });\n\n            return result;\n        };\n        const getTracksWithWidestRange = function (trackArr) {\n            let max = 0;\n            let result = [];\n            let tmp;\n\n            trackArr.forEach(function (track) {\n                tmp = track.representationCount;\n\n                if (tmp > max) {\n                    max = tmp;\n                    result = [track];\n                } else if (tmp === max) {\n                    result.push(track);\n                }\n            });\n\n            return result;\n        };\n\n        switch (mode) {\n            case TRACK_SELECTION_MODE_HIGHEST_BITRATE:\n                tmpArr = getTracksWithHighestBitrate(tracks);\n\n                if (tmpArr.length > 1) {\n                    tmpArr = getTracksWithWidestRange(tmpArr);\n                }\n                break;\n            case TRACK_SELECTION_MODE_WIDEST_RANGE:\n                tmpArr = getTracksWithWidestRange(tracks);\n\n                if (tmpArr.length > 1) {\n                    tmpArr = getTracksWithHighestBitrate(tracks);\n                }\n                break;\n            default:\n                logger.warn('Track selection mode is not supported: ' + mode);\n                break;\n        }\n\n        return tmpArr[0];\n    }\n\n    function createTrackInfo() {\n        return {\n            audio: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            video: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            text: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            fragmentedText: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            },\n            image: {\n                list: [],\n                storeLastSettings: true,\n                current: null\n            }\n        };\n    }\n\n    instance = {\n        checkInitialMediaSettingsForType: checkInitialMediaSettingsForType,\n        addTrack: addTrack,\n        getTracksFor: getTracksFor,\n        getCurrentTrackFor: getCurrentTrackFor,\n        isCurrentTrack: isCurrentTrack,\n        setTrack: setTrack,\n        setInitialSettings: setInitialSettings,\n        getInitialSettings: getInitialSettings,\n        setSwitchMode: setSwitchMode,\n        getSwitchMode: getSwitchMode,\n        setSelectionModeForInitialTrack: setSelectionModeForInitialTrack,\n        getSelectionModeForInitialTrack: getSelectionModeForInitialTrack,\n        isMultiTrackSupportedByType: isMultiTrackSupportedByType,\n        isTracksEqual: isTracksEqual,\n        matchSettings: matchSettings,\n        saveTextSettingsDisabled: saveTextSettingsDisabled,\n        setConfig: setConfig,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nMediaController.__dashjs_factory_name = 'MediaController';\nconst factory = FactoryMaker.getSingletonFactory(MediaController);\nfactory.TRACK_SWITCH_MODE_NEVER_REPLACE = TRACK_SWITCH_MODE_NEVER_REPLACE;\nfactory.TRACK_SWITCH_MODE_ALWAYS_REPLACE = TRACK_SWITCH_MODE_ALWAYS_REPLACE;\nfactory.TRACK_SELECTION_MODE_HIGHEST_BITRATE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;\nfactory.TRACK_SELECTION_MODE_WIDEST_RANGE = TRACK_SELECTION_MODE_WIDEST_RANGE;\nfactory.DEFAULT_INIT_TRACK_SELECTION_MODE = DEFAULT_INIT_TRACK_SELECTION_MODE;\nFactoryMaker.updateSingletonFactory(MediaController.__dashjs_factory_name, factory);\nexport default factory;\n"]}