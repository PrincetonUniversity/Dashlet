{"version":3,"sources":["../../../../src/streaming/StreamProcessor.js"],"names":["StreamProcessor","config","context","eventBus","getInstance","streamInfo","type","errHandler","mimeType","timelineConverter","adapter","manifestModel","mediaPlayerModel","fragmentModel","abrController","playbackController","mediaController","textController","dashMetrics","settings","boxParser","instance","logger","isDynamic","mediaInfo","mediaInfoArr","bufferController","scheduleController","representationController","liveEdgeFinder","indexHandler","bufferingTime","bufferPruned","setup","getLogger","resetInitialSettings","on","Events","DATA_UPDATE_COMPLETED","onDataUpdateCompleted","EventBus","EVENT_PRIORITY_HIGH","QUALITY_CHANGE_REQUESTED","onQualityChanged","INIT_FRAGMENT_NEEDED","onInitFragmentNeeded","MEDIA_FRAGMENT_NEEDED","onMediaFragmentNeeded","MEDIA_FRAGMENT_LOADED","onMediaFragmentLoaded","BUFFER_LEVEL_UPDATED","onBufferLevelUpdated","BUFFER_LEVEL_STATE_CHANGED","onBufferLevelStateChanged","BUFFER_CLEARED","onBufferCleared","SEEK_TARGET","onSeekTarget","initialize","mediaSource","hasVideoTrack","create","baseURLController","events","errors","Errors","debug","requestModifier","dashConstants","DashConstants","constants","Constants","urlUtils","manifestInfo","registerStreamType","streamId","id","createBufferControllerForType","reset","errored","keepBuffers","unRegisterStreamType","off","isUpdating","e","sender","getType","getStreamId","error","setCurrentRepresentation","convertDataToRepresentationInfo","currentRepresentation","code","SEGMENTS_UPDATE_FAILED_ERROR_CODE","activeStreamId","getStreamController","getActiveStreamInfo","addDVRMetric","mediaType","representationInfo","getRepresentationInfo","newQuality","pushPlayListTraceMetrics","Date","PlayListTrace","REPRESENTATION_SWITCH_STOP_REASON","createPlaylistTraceMetrics","getTime","getPlaybackRate","addBufferLevel","bufferLevel","getValue","doNotUpdateDVRWindowOnBufferUpdated","addBufferState","state","getBufferTarget","MetricsConstants","BUFFER_EMPTY","isSeeking","REBUFFERING_REASON","syncExecutedRequestsWithBufferedRange","getBuffer","getAllBufferRanges","duration","from","range","calcSegmentAvailabilityRange","getCurrentRepresentation","addDVRInfo","getRepresentationController","setBuffer","buffer","getBufferController","getFragmentModel","updateStreamInfo","newStreamInfo","get","streaming","useAppendWindow","updateAppendWindow","getStreamInfo","selectMediaInfo","newMediaInfo","newRealAdaptation","getRealAdaptation","voRepresentations","getVoRepresentations","realAdaptation","getData","maxQuality","getTopQualityIndexFor","minIdx","getMinAllowedIndexFor","quality","averageThroughput","bitrate","FRAGMENTED_TEXT","getThroughputHistory","getAverageThroughput","getInitialBitrateFor","getQualityForBitrate","getQualityFor","undefined","setMimeType","updateData","addMediaInfo","selectNewMediaInfo","indexOf","push","getMediaInfoArr","getMediaInfo","getMediaSource","setMediaSource","dischargePreBuffer","getScheduleController","voRepresentation","getRepresentationForQuality","isBufferingCompleted","getIsBufferingCompleted","getBufferLevel","getIsTextTrack","isTextEnabled","representationId","appendInitSegment","request","getInitRequest","processInitRequest","getIsPruningInProgress","findNextRequest","seekTarget","replacement","setSeekTarget","NaN","isNaN","startTime","delayLoadingTime","getTimeToLoadDelay","setTimeToLoadDelay","processMediaRequest","requestToReplace","hasSeekTarget","currentTime","getNormalizedTime","time","bufferIsDivided","getRangeAt","playingRange","start","end","hasDiscontinuities","hasDiscontinuitiesAfter","removeExecutedRequestsAfterTime","getFragmentRequest","timeThreshold","ignoreIsFinished","console","log","useTime","keepIdx","action","FragmentRequest","ACTION_COMPLETE","isFragmentLoaded","chunk","bytes","eventStreamMedia","getEventsFor","eventStreamTrack","length","getRequests","FragmentModel","FRAGMENT_MODEL_EXECUTED","index","handleInbandEvents","trigger","INBAND_EVENTS","data","mediaInbandEvents","trackInbandEvents","fragmentStartTime","Math","max","eventStreams","inbandEvents","concat","i","ln","schemeIdUri","value","isoFile","parse","eventBoxes","getBoxes","event","getEvent","createBuffer","previousBuffers","switchTrackAsked","controller","DashJSError","MEDIASOURCE_TYPE_UNSUPPORTED_CODE","MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE","VIDEO","AUDIO","getLiveStartTime","liveStartTime","currentRepresentationInfo","liveEdge","getLiveEdge","findRequestForLiveEdge","lowLatencyEnabled","getLiveDelay","liveDelay","dvrWindowSize","DVRWindowSize","dvrWindowSafetyMargin","isFinite","setLiveDelay","setBufferingTime","resetIndexHandler","resetIndex","representation","options","fragRequest","getSegmentRequestForTime","getNextSegmentRequest","finalisePlayList","reason","__dashjs_factory_name","FactoryMaker","getClassFactory"],"mappings":"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","file":"StreamProcessor.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport DashConstants from '../dash/constants/DashConstants';\nimport MetricsConstants from './constants/MetricsConstants';\nimport FragmentModel from './models/FragmentModel';\nimport BufferController from './controllers/BufferController';\nimport TextBufferController from './text/TextBufferController';\nimport ScheduleController from './controllers/ScheduleController';\nimport RepresentationController from '../dash/controllers/RepresentationController';\nimport LiveEdgeFinder from './utils/LiveEdgeFinder';\nimport FactoryMaker from '../core/FactoryMaker';\nimport {checkInteger} from './utils/SupervisorTools';\nimport EventBus from '../core/EventBus';\nimport Events from '../core/events/Events';\nimport DashHandler from '../dash/DashHandler';\nimport Errors from '../core/errors/Errors';\nimport DashJSError from './vo/DashJSError';\nimport Debug from '../core/Debug';\nimport RequestModifier from './utils/RequestModifier';\nimport URLUtils from '../streaming/utils/URLUtils';\nimport BoxParser from './utils/BoxParser';\nimport FragmentRequest from './vo/FragmentRequest';\nimport {PlayListTrace} from './vo/metrics/PlayList';\n\nfunction StreamProcessor(config) {\n\n    config = config || {};\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n\n    let streamInfo = config.streamInfo;\n    let type = config.type;\n    let errHandler = config.errHandler;\n    let mimeType = config.mimeType;\n    let timelineConverter = config.timelineConverter;\n    let adapter = config.adapter;\n    let manifestModel = config.manifestModel;\n    let mediaPlayerModel = config.mediaPlayerModel;\n    let fragmentModel = config.fragmentModel;\n    let abrController = config.abrController;\n    let playbackController = config.playbackController;\n    let mediaController = config.mediaController;\n    let textController = config.textController;\n    let dashMetrics = config.dashMetrics;\n    let settings = config.settings;\n    let boxParser = config.boxParser;\n\n    let instance,\n        logger,\n        isDynamic,\n        mediaInfo,\n        mediaInfoArr,\n        bufferController,\n        scheduleController,\n        representationController,\n        liveEdgeFinder,\n        indexHandler,\n        bufferingTime,\n        bufferPruned;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        resetInitialSettings();\n\n        eventBus.on(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance, EventBus.EVENT_PRIORITY_HIGH); // High priority to be notified before Stream\n        eventBus.on(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.on(Events.INIT_FRAGMENT_NEEDED, onInitFragmentNeeded, instance);\n        eventBus.on(Events.MEDIA_FRAGMENT_NEEDED, onMediaFragmentNeeded, instance);\n        eventBus.on(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);\n        eventBus.on(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n        eventBus.on(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, instance);\n        eventBus.on(Events.BUFFER_CLEARED, onBufferCleared, instance);\n        eventBus.on(Events.SEEK_TARGET, onSeekTarget, instance);\n    }\n\n    function initialize(mediaSource, hasVideoTrack) {\n        indexHandler = DashHandler(context).create({\n            streamInfo: streamInfo,\n            type: type,\n            timelineConverter: timelineConverter,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            baseURLController: config.baseURLController,\n            errHandler: errHandler,\n            settings: settings,\n            boxParser: boxParser,\n            events: Events,\n            eventBus: eventBus,\n            errors: Errors,\n            debug: Debug(context).getInstance(),\n            requestModifier: RequestModifier(context).getInstance(),\n            dashConstants: DashConstants,\n            constants: Constants,\n            urlUtils: URLUtils(context).getInstance()\n        });\n\n        // Create live edge finder for dynamic streams\n        isDynamic = streamInfo.manifestInfo.isDynamic;\n        if (isDynamic) {\n            liveEdgeFinder = LiveEdgeFinder(context).create({\n                timelineConverter: timelineConverter\n            });\n        }\n\n        // Create/initialize controllers\n        indexHandler.initialize(isDynamic);\n        abrController.registerStreamType(type, instance);\n\n        representationController = RepresentationController(context).create({\n            streamId: streamInfo.id,\n            type: type,\n            abrController: abrController,\n            dashMetrics: dashMetrics,\n            playbackController: playbackController,\n            timelineConverter: timelineConverter,\n            dashConstants: DashConstants,\n            events: Events,\n            eventBus: eventBus,\n            errors: Errors\n        });\n\n        bufferController = createBufferControllerForType(type);\n        if (bufferController) {\n            bufferController.initialize(mediaSource);\n        }\n\n        scheduleController = ScheduleController(context).create({\n            streamId: streamInfo.id,\n            type: type,\n            mimeType: mimeType,\n            adapter: adapter,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            fragmentModel: fragmentModel,\n            abrController: abrController,\n            playbackController: playbackController,\n            textController: textController,\n            mediaController: mediaController,\n            bufferController: bufferController,\n            settings: settings\n        });\n\n        scheduleController.initialize(hasVideoTrack);\n\n        bufferingTime = 0;\n        bufferPruned = false;\n    }\n\n    function resetInitialSettings() {\n        mediaInfoArr = [];\n        mediaInfo = null;\n        bufferingTime = 0;\n    }\n\n    function reset(errored, keepBuffers) {\n        if (indexHandler) {\n            indexHandler.reset();\n        }\n\n        if (bufferController) {\n            bufferController.reset(errored, keepBuffers);\n            bufferController = null;\n        }\n\n        if (scheduleController) {\n            scheduleController.reset();\n            scheduleController = null;\n        }\n\n        if (representationController) {\n            representationController.reset();\n            representationController = null;\n        }\n\n        if (liveEdgeFinder) {\n            liveEdgeFinder.reset();\n            liveEdgeFinder = null;\n        }\n\n        if (abrController) {\n            abrController.unRegisterStreamType(type);\n        }\n\n        eventBus.off(Events.DATA_UPDATE_COMPLETED, onDataUpdateCompleted, instance);\n        eventBus.off(Events.QUALITY_CHANGE_REQUESTED, onQualityChanged, instance);\n        eventBus.off(Events.INIT_FRAGMENT_NEEDED, onInitFragmentNeeded, instance);\n        eventBus.off(Events.MEDIA_FRAGMENT_NEEDED, onMediaFragmentNeeded, instance);\n        eventBus.off(Events.MEDIA_FRAGMENT_LOADED, onMediaFragmentLoaded, instance);\n        eventBus.off(Events.BUFFER_LEVEL_UPDATED, onBufferLevelUpdated, instance);\n        eventBus.off(Events.BUFFER_LEVEL_STATE_CHANGED, onBufferLevelStateChanged, instance);\n        eventBus.off(Events.BUFFER_CLEARED, onBufferCleared, instance);\n        eventBus.off(Events.SEEK_TARGET, onSeekTarget, instance);\n\n        resetInitialSettings();\n        type = null;\n        streamInfo = null;\n    }\n\n    function isUpdating() {\n        return representationController ? representationController.isUpdating() : false;\n    }\n\n\n    function onDataUpdateCompleted(e) {\n        if (e.sender.getType() !== getType() || e.sender.getStreamId() !== streamInfo.id) return;\n\n        if (!e.error) {\n            // Update representation if no error\n            scheduleController.setCurrentRepresentation(adapter.convertDataToRepresentationInfo(e.currentRepresentation));\n        }\n        if (!e.error || e.error.code === Errors.SEGMENTS_UPDATE_FAILED_ERROR_CODE) {\n            // Update has been postponed, update nevertheless DVR info\n            const activeStreamId = playbackController.getStreamController().getActiveStreamInfo().id;\n            if (activeStreamId === streamInfo.id) {\n                addDVRMetric();\n            }\n        }\n    }\n\n    function onQualityChanged(e) {\n        if (type !== e.mediaType || streamInfo.id !== e.streamInfo.id) return;\n        let representationInfo = getRepresentationInfo(e.newQuality);\n        scheduleController.setCurrentRepresentation(representationInfo);\n        dashMetrics.pushPlayListTraceMetrics(new Date(), PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON);\n        dashMetrics.createPlaylistTraceMetrics(representationInfo.id, playbackController.getTime() * 1000, playbackController.getPlaybackRate());\n    }\n\n    function onBufferLevelUpdated(e) {\n        if (e.streamId !== streamInfo.id || e.mediaType !== type) return;\n\n        dashMetrics.addBufferLevel(type, new Date(), e.bufferLevel * 1000);\n\n        const activeStreamId = playbackController.getStreamController().getActiveStreamInfo().id;\n        if (!manifestModel.getValue().doNotUpdateDVRWindowOnBufferUpdated && streamInfo.id === activeStreamId) {\n            addDVRMetric();\n        }\n    }\n\n    function onBufferLevelStateChanged(e) {\n        if (e.streamId !== streamInfo.id || e.mediaType !== type) return;\n\n        dashMetrics.addBufferState(type, e.state, scheduleController.getBufferTarget());\n        if (e.state === MetricsConstants.BUFFER_EMPTY && !playbackController.isSeeking()) {\n            // logger.info('Buffer is empty! Stalling!');\n            dashMetrics.pushPlayListTraceMetrics(new Date(), PlayListTrace.REBUFFERING_REASON);\n        }\n    }\n\n    function onBufferCleared(e) {\n        if (e.streamId !== streamInfo.id || e.mediaType !== type) return;\n\n        // Remove executed requests not buffered anymore\n        fragmentModel.syncExecutedRequestsWithBufferedRange(\n            bufferController.getBuffer().getAllBufferRanges(),\n            streamInfo.duration);\n\n        // If buffer removed ahead current time (QuotaExceededError or automatic buffer pruning) then adjust current index handler time\n        if (e.from > playbackController.getTime()) {\n            bufferingTime = e.from;\n            bufferPruned = true;\n        }\n    }\n\n    function addDVRMetric() {\n        const manifestInfo = streamInfo.manifestInfo;\n        const isDynamic = manifestInfo.isDynamic;\n        const range = timelineConverter.calcSegmentAvailabilityRange(representationController.getCurrentRepresentation(), isDynamic);\n        dashMetrics.addDVRInfo(getType(), playbackController.getTime(), manifestInfo, range);\n    }\n\n    function getType() {\n        return type;\n    }\n\n    function getRepresentationController() {\n        return representationController;\n    }\n\n    function getBuffer() {\n        return bufferController ? bufferController.getBuffer() : null;\n    }\n\n    function setBuffer(buffer) {\n        bufferController.setBuffer(buffer);\n    }\n\n    function getBufferController() {\n        return bufferController;\n    }\n\n    function getFragmentModel() {\n        return fragmentModel;\n    }\n\n    function updateStreamInfo(newStreamInfo) {\n        streamInfo = newStreamInfo;\n        if (settings.get().streaming.useAppendWindow) {\n            bufferController.updateAppendWindow();\n        }\n    }\n\n    function getStreamInfo() {\n        return streamInfo;\n    }\n\n    function selectMediaInfo(newMediaInfo) {\n        if (newMediaInfo !== mediaInfo && (!newMediaInfo || !mediaInfo || (newMediaInfo.type === mediaInfo.type))) {\n            mediaInfo = newMediaInfo;\n        }\n\n        const newRealAdaptation = adapter.getRealAdaptation(streamInfo, mediaInfo);\n        const voRepresentations = adapter.getVoRepresentations(mediaInfo);\n\n        if (representationController) {\n            const realAdaptation = representationController.getData();\n            const maxQuality = abrController.getTopQualityIndexFor(type, streamInfo.id);\n            const minIdx = abrController.getMinAllowedIndexFor(type);\n\n            let quality,\n                averageThroughput;\n            let bitrate = null;\n\n            if ((realAdaptation === null || (realAdaptation.id != newRealAdaptation.id)) && type !== Constants.FRAGMENTED_TEXT) {\n                averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type);\n                bitrate = averageThroughput || abrController.getInitialBitrateFor(type);\n                quality = abrController.getQualityForBitrate(mediaInfo, bitrate);\n            } else {\n                quality = abrController.getQualityFor(type);\n            }\n\n            if (minIdx !== undefined && quality < minIdx) {\n                quality = minIdx;\n            }\n            if (quality > maxQuality) {\n                quality = maxQuality;\n            }\n            indexHandler.setMimeType(mediaInfo ? mediaInfo.mimeType : null);\n            representationController.updateData(newRealAdaptation, voRepresentations, type, quality);\n        }\n    }\n\n    function addMediaInfo(newMediaInfo, selectNewMediaInfo) {\n        if (mediaInfoArr.indexOf(newMediaInfo) === -1) {\n            mediaInfoArr.push(newMediaInfo);\n        }\n\n        if (selectNewMediaInfo) {\n            this.selectMediaInfo(newMediaInfo);\n        }\n    }\n\n    function getMediaInfoArr() {\n        return mediaInfoArr;\n    }\n\n    function getMediaInfo() {\n        return mediaInfo;\n    }\n\n    function getMediaSource() {\n        return bufferController.getMediaSource();\n    }\n\n    function setMediaSource(mediaSource) {\n        bufferController.setMediaSource(mediaSource, getMediaInfoArr());\n    }\n\n    function dischargePreBuffer() {\n        bufferController.dischargePreBuffer();\n    }\n\n    function getScheduleController() {\n        return scheduleController;\n    }\n\n    /**\n     * Get a specific voRepresentation. If quality parameter is defined, this function will return the voRepresentation for this quality.\n     * Otherwise, this function will return the current voRepresentation used by the representationController.\n     * @param {number} quality - quality index of the voRepresentaion expected.\n     */\n    function getRepresentationInfo(quality) {\n        let voRepresentation;\n\n        if (quality !== undefined) {\n            checkInteger(quality);\n            voRepresentation = representationController ? representationController.getRepresentationForQuality(quality) : null;\n        } else {\n            voRepresentation = representationController ? representationController.getCurrentRepresentation() : null;\n        }\n\n        return adapter.convertDataToRepresentationInfo(voRepresentation);\n    }\n\n    function isBufferingCompleted() {\n        return bufferController ? bufferController.getIsBufferingCompleted() : false;\n    }\n\n    function getBufferLevel() {\n        return bufferController ? bufferController.getBufferLevel() : 0;\n    }\n\n    function onInitFragmentNeeded(e) {\n        if (!e.sender || e.mediaType !== type || e.streamId !== streamInfo.id) return;\n\n        if (adapter.getIsTextTrack(mimeType) && !textController.isTextEnabled()) return;\n\n        if (bufferController && e.representationId) {\n            if (!bufferController.appendInitSegment(e.representationId)) {\n                // Init segment not in cache, send new request\n                const request = indexHandler ? indexHandler.getInitRequest(getMediaInfo(), representationController.getCurrentRepresentation()) : null;\n                scheduleController.processInitRequest(request);\n            }\n        }\n    }\n\n    function onMediaFragmentNeeded(e) {\n        if (!e.sender || e.mediaType !== type || e.streamId !== streamInfo.id) {\n            return;\n        }\n        let request;\n\n\n        // Don't schedule next fragments while pruning to avoid buffer inconsistencies\n        if (!bufferController.getIsPruningInProgress()) {\n            request = findNextRequest(e.seekTarget, e.replacement);\n            if (request) {\n                scheduleController.setSeekTarget(NaN);\n                if (!e.replacement) {\n                    if (!isNaN(request.startTime + request.duration)) {\n                        bufferingTime = request.startTime + request.duration;\n                    }\n                    request.delayLoadingTime = new Date().getTime() + scheduleController.getTimeToLoadDelay();\n                    scheduleController.setTimeToLoadDelay(0);\n                }\n            }\n        }\n\n        scheduleController.processMediaRequest(request);\n    }\n\n    // find the next request url\n    function findNextRequest(seekTarget, requestToReplace) {\n        const representationInfo = getRepresentationInfo();\n        const hasSeekTarget = !isNaN(seekTarget);\n        const currentTime = playbackController.getNormalizedTime();\n        let time = hasSeekTarget ? seekTarget : bufferingTime;\n        let bufferIsDivided = false;\n        let request;\n\n        if (isNaN(time) || (getType() === Constants.FRAGMENTED_TEXT && !textController.isTextEnabled())) {\n            return null;\n        }\n        /**\n         * This is critical for IE/Safari/EDGE\n         * */\n        if (bufferController) {\n            let range = bufferController.getRangeAt(time);\n            const playingRange = bufferController.getRangeAt(currentTime);\n            if ((range !== null || playingRange !== null) && !hasSeekTarget) {\n                if (!range || (playingRange && playingRange.start != range.start && playingRange.end != range.end)) {\n                    const hasDiscontinuities = bufferController.getBuffer().hasDiscontinuitiesAfter(currentTime);\n                    if (hasDiscontinuities && getType() !== Constants.FRAGMENTED_TEXT) {\n                        fragmentModel.removeExecutedRequestsAfterTime(playingRange.end);\n                        bufferIsDivided = true;\n                    }\n                }\n            }\n        }\n\n        if (requestToReplace) {\n            time = requestToReplace.startTime + (requestToReplace.duration / 2);\n            request = getFragmentRequest(representationInfo, time, {\n                timeThreshold: 0,\n                ignoreIsFinished: true\n            });\n        } else {\n            console.log('No-requestToReplace');\n            console.log(representationInfo);\n            // Use time just whenever is strictly needed\n            const useTime = hasSeekTarget || bufferPruned || bufferIsDivided;\n            request = getFragmentRequest(representationInfo,\n                useTime ? time : undefined, {\n                    keepIdx: !useTime\n                });\n            bufferPruned = false;\n\n            // Then, check if this request was downloaded or not\n            while (request && request.action !== FragmentRequest.ACTION_COMPLETE && fragmentModel.isFragmentLoaded(request)) {\n                // loop until we found not loaded fragment, or no fragment\n                request = getFragmentRequest(representationInfo);\n            }\n\n            console.log(request);\n        }\n\n        return request;\n    }\n\n    function onMediaFragmentLoaded(e) {\n        const chunk = e.chunk;\n        if (chunk.streamId !== streamInfo.id || chunk.mediaInfo.type != type) return;\n\n        const bytes = chunk.bytes;\n        const quality = chunk.quality;\n        const currentRepresentation = getRepresentationInfo(quality);\n\n        const voRepresentation = representationController && currentRepresentation ? representationController.getRepresentationForQuality(currentRepresentation.quality) : null;\n        const eventStreamMedia = adapter.getEventsFor(currentRepresentation.mediaInfo);\n        const eventStreamTrack = adapter.getEventsFor(currentRepresentation, voRepresentation);\n\n        if (eventStreamMedia && eventStreamMedia.length > 0 || eventStreamTrack && eventStreamTrack.length > 0) {\n            const request = fragmentModel.getRequests({\n                state: FragmentModel.FRAGMENT_MODEL_EXECUTED,\n                quality: quality,\n                index: chunk.index\n            })[0];\n\n            const events = handleInbandEvents(bytes, request, eventStreamMedia, eventStreamTrack);\n            eventBus.trigger(Events.INBAND_EVENTS, {sender: instance, events: events});\n        }\n    }\n\n    function handleInbandEvents(data, request, mediaInbandEvents, trackInbandEvents) {\n        const fragmentStartTime = Math.max(!request || isNaN(request.startTime) ? 0 : request.startTime, 0);\n        const eventStreams = [];\n        const events = [];\n\n        /* Extract the possible schemeIdUri : If a DASH client detects an event message box with a scheme that is not defined in MPD, the client is expected to ignore it */\n        const inbandEvents = mediaInbandEvents.concat(trackInbandEvents);\n        for (let i = 0, ln = inbandEvents.length; i < ln; i++) {\n            eventStreams[inbandEvents[i].schemeIdUri + '/' + inbandEvents[i].value] = inbandEvents[i];\n        }\n\n        const isoFile = BoxParser(context).getInstance().parse(data);\n        const eventBoxes = isoFile.getBoxes('emsg');\n\n        for (let i = 0, ln = eventBoxes.length; i < ln; i++) {\n            const event = adapter.getEvent(eventBoxes[i], eventStreams, fragmentStartTime);\n\n            if (event) {\n                events.push(event);\n            }\n        }\n\n        return events;\n    }\n\n    function createBuffer(previousBuffers) {\n        return (getBuffer() || bufferController ? bufferController.createBuffer(mediaInfoArr, previousBuffers) : null);\n    }\n\n    function switchTrackAsked() {\n        scheduleController.switchTrackAsked();\n    }\n\n    function createBufferControllerForType(type) {\n        let controller = null;\n\n        if (!type) {\n            errHandler.error(new DashJSError(Errors.MEDIASOURCE_TYPE_UNSUPPORTED_CODE, Errors.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + 'not properly defined'));\n            return null;\n        }\n\n        if (type === Constants.VIDEO || type === Constants.AUDIO) {\n            controller = BufferController(context).create({\n                streamInfo: streamInfo,\n                type: type,\n                mediaPlayerModel: mediaPlayerModel,\n                manifestModel: manifestModel,\n                fragmentModel: fragmentModel,\n                errHandler: errHandler,\n                mediaController: mediaController,\n                representationController: representationController,\n                adapter: adapter,\n                textController: textController,\n                abrController: abrController,\n                playbackController: playbackController,\n                settings: settings\n            });\n        } else {\n            controller = TextBufferController(context).create({\n                streamInfo: streamInfo,\n                type: type,\n                mimeType: mimeType,\n                mediaPlayerModel: mediaPlayerModel,\n                manifestModel: manifestModel,\n                fragmentModel: fragmentModel,\n                errHandler: errHandler,\n                mediaController: mediaController,\n                representationController: representationController,\n                adapter: adapter,\n                textController: textController,\n                abrController: abrController,\n                playbackController: playbackController,\n                settings: settings\n            });\n        }\n\n        return controller;\n    }\n\n\n    function getLiveStartTime() {\n        if (!isDynamic) return NaN;\n        if (!liveEdgeFinder) return NaN;\n\n        let liveStartTime = NaN;\n        const currentRepresentationInfo = getRepresentationInfo();\n        const liveEdge = liveEdgeFinder.getLiveEdge(currentRepresentationInfo);\n\n        if (isNaN(liveEdge)) {\n            return NaN;\n        }\n\n        const request = findRequestForLiveEdge(liveEdge, currentRepresentationInfo);\n\n        if (request) {\n            // When low latency mode is selected but browser doesn't support fetch\n            // start at the beginning of the segment to avoid consuming the whole buffer\n            if (settings.get().streaming.lowLatencyEnabled) {\n                liveStartTime = request.duration < mediaPlayerModel.getLiveDelay() ? request.startTime : request.startTime + request.duration - mediaPlayerModel.getLiveDelay();\n            } else {\n                liveStartTime = request.startTime;\n            }\n        }\n\n        return liveStartTime;\n    }\n\n    function findRequestForLiveEdge(liveEdge, currentRepresentationInfo) {\n        try {\n            let request = null;\n            let liveDelay = playbackController.getLiveDelay();\n            const dvrWindowSize = !isNaN(streamInfo.manifestInfo.DVRWindowSize) ? streamInfo.manifestInfo.DVRWindowSize : liveDelay;\n            const dvrWindowSafetyMargin = 0.1 * dvrWindowSize;\n            let startTime;\n\n            // Make sure that we have at least a valid request for the end of the DVR window, otherwise we might try forever\n            if (!isFinite(dvrWindowSize) || getFragmentRequest(currentRepresentationInfo, liveEdge - dvrWindowSize + dvrWindowSafetyMargin, {\n                ignoreIsFinished: true\n            })) {\n\n                // Try to find a request as close as possible to the targeted live edge\n                while (!request && liveDelay <= dvrWindowSize) {\n                    startTime = liveEdge - liveDelay;\n                    request = getFragmentRequest(currentRepresentationInfo, startTime, {\n                        ignoreIsFinished: true\n                    });\n                    if (!request) {\n                        liveDelay += 1; // Increase by one second for each iteration\n                    }\n                }\n            }\n\n            if (request) {\n                playbackController.setLiveDelay(liveDelay, true);\n            }\n            logger.debug('live edge: ' + liveEdge + ', live delay: ' + liveDelay + ', live target: ' + startTime);\n            return request;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function onSeekTarget(e) {\n        if ((e.mediaType && e.mediaType !== type) || e.streamId !== streamInfo.id) return;\n\n        bufferingTime = e.time;\n        scheduleController.setSeekTarget(e.time);\n    }\n\n    function setBufferingTime(value) {\n        bufferingTime = value;\n    }\n\n    function resetIndexHandler() {\n        if (indexHandler) {\n            indexHandler.resetIndex();\n        }\n    }\n\n    function getInitRequest(quality) {\n        checkInteger(quality);\n        const representation = representationController ? representationController.getRepresentationForQuality(quality) : null;\n        return indexHandler ? indexHandler.getInitRequest(getMediaInfo(), representation) : null;\n    }\n\n    function getFragmentRequest(representationInfo, time, options) {\n        let fragRequest = null;\n\n        if (indexHandler) {\n            const representation = representationController && representationInfo ? representationController.getRepresentationForQuality(representationInfo.quality) : null;\n\n            // if time and options are undefined, it means the next segment is requested\n            // otherwise, the segment at this specific time is requested.\n            if (time !== undefined && options !== undefined) {\n                fragRequest = indexHandler.getSegmentRequestForTime(getMediaInfo(), representation, time, options);\n            } else {\n                fragRequest = indexHandler.getNextSegmentRequest(getMediaInfo(), representation);\n            }\n        }\n\n        return fragRequest;\n    }\n\n    function finalisePlayList(time, reason) {\n        dashMetrics.pushPlayListTraceMetrics(time, reason);\n    }\n\n    instance = {\n        initialize: initialize,\n        isUpdating: isUpdating,\n        getType: getType,\n        getBufferController: getBufferController,\n        getFragmentModel: getFragmentModel,\n        getScheduleController: getScheduleController,\n        getRepresentationController: getRepresentationController,\n        getRepresentationInfo: getRepresentationInfo,\n        getBufferLevel: getBufferLevel,\n        isBufferingCompleted: isBufferingCompleted,\n        createBuffer: createBuffer,\n        updateStreamInfo: updateStreamInfo,\n        getStreamInfo: getStreamInfo,\n        selectMediaInfo: selectMediaInfo,\n        addMediaInfo: addMediaInfo,\n        getLiveStartTime: getLiveStartTime,\n        switchTrackAsked: switchTrackAsked,\n        getMediaInfoArr: getMediaInfoArr,\n        getMediaInfo: getMediaInfo,\n        getMediaSource: getMediaSource,\n        setMediaSource: setMediaSource,\n        dischargePreBuffer: dischargePreBuffer,\n        getBuffer: getBuffer,\n        setBuffer: setBuffer,\n        setBufferingTime: setBufferingTime,\n        resetIndexHandler: resetIndexHandler,\n        getInitRequest: getInitRequest,\n        getFragmentRequest: getFragmentRequest,\n        finalisePlayList: finalisePlayList,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nStreamProcessor.__dashjs_factory_name = 'StreamProcessor';\nexport default FactoryMaker.getClassFactory(StreamProcessor);\n"]}