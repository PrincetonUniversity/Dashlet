{"version":3,"sources":["../../../../../src/streaming/text/TextController.js"],"names":["TextController","context","instance","textSourceBuffer","errHandler","adapter","manifestModel","mediaController","videoModel","streamController","textTracks","vttParser","ttmlParser","eventBus","defaultSettings","initialSettingsSet","lastEnabledIndex","textDefaultEnabled","allTracksAreDisabled","forceTextStreaming","textTracksAdded","disableTextBeforeTextTracksAdded","previousPeriodSelectedTrack","setup","getInstance","initialize","on","Events","TEXT_TRACKS_QUEUE_INITIALIZED","onTextTracksAdded","CURRENT_TRACK_CHANGED","onCurrentTrackChanged","PERIOD_SWITCH_STARTED","onPeriodSwitchStarted","STREAM_COMPLETED","onStreamCompleted","PERIOD_SWITCH_COMPLETED","onPeriodSwitchCompleted","resetInitialSettings","e","undefined","fromStreamInfo","getCurrentTrackIdx","setTextTrack","setConfig","config","getTextSourceBuffer","getAllTracksAreDisabled","addEmbeddedTrack","mediaInfo","setTextDefaultLanguage","lang","setInitialSettings","settings","getTextDefaultLanguage","tracks","index","some","item","idx","matchSettings","trigger","TEXT_TRACKS_ADDED","enabled","isTextEnabled","event","newMediaInfo","type","Constants","FRAGMENTED_TEXT","role","roles","accessibility","setTextDefaultEnabled","enable","getTextDefaultEnabled","enableText","enableForcedTextStreaming","getConfig","fragmentModel","fragmentedTracks","mediaInfosArr","streamProcessor","oldTrackIdx","saveTextSettingsDisabled","setModeForTrackIdx","TEXT_HIDDEN","setCurrentTrackIdx","TEXT_SHOWING","currentTrackInfo","getCurrentTrackInfo","isFragmented","isEmbedded","i","length","id","currentFragTrack","getCurrentTrackFor","getActiveStreamInfo","abortRequests","removeExecutedRequestsBeforeTime","remove","deleteCuesFromTrackIdx","setTrack","setCurrentFragmentedTrackIdx","streamProcessors","getActiveStreamProcessors","getType","setBufferingTime","getTime","getScheduleController","start","TEXT","getMediaInfoArr","selectMediaInfo","reset","resetEmbedded","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"mappings":"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","file":"TextController.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport TextSourceBuffer from './TextSourceBuffer';\nimport TextTracks from './TextTracks';\nimport VTTParser from '../utils/VTTParser';\nimport TTMLParser from '../utils/TTMLParser';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport { checkParameterType } from '../utils/SupervisorTools';\n\nfunction TextController() {\n\n    let context = this.context;\n\n    let instance,\n        textSourceBuffer,\n        errHandler,\n        adapter,\n        manifestModel,\n        mediaController,\n        videoModel,\n        streamController,\n        textTracks,\n        vttParser,\n        ttmlParser,\n        eventBus,\n        defaultSettings,\n        initialSettingsSet,\n        lastEnabledIndex,\n        textDefaultEnabled, // this is used for default settings (each time a file is loaded, we check value of this settings )\n        allTracksAreDisabled, // this is used for one session (when a file has been loaded, we use this settings to enable/disable text)\n        forceTextStreaming,\n        textTracksAdded,\n        disableTextBeforeTextTracksAdded,\n        previousPeriodSelectedTrack;\n\n    function setup() {\n\n        defaultSettings = null;\n        lastEnabledIndex = -1;\n        forceTextStreaming = false;\n        textTracksAdded = false;\n        initialSettingsSet = false;\n        disableTextBeforeTextTracksAdded = false;\n        textTracks = TextTracks(context).getInstance();\n        vttParser = VTTParser(context).getInstance();\n        ttmlParser = TTMLParser(context).getInstance();\n        textSourceBuffer = TextSourceBuffer(context).getInstance();\n        eventBus = EventBus(context).getInstance();\n\n        textTracks.initialize();\n        eventBus.on(Events.TEXT_TRACKS_QUEUE_INITIALIZED, onTextTracksAdded, instance);\n        eventBus.on(Events.CURRENT_TRACK_CHANGED, onCurrentTrackChanged, instance);\n\n        /*\n        * register those event callbacks in order to detect switch of periods and set\n        * correctly the selected track index in the new period.\n        * there is different cases :\n        *   - switch occurs after a seek command from the user\n        *   - switch occurs but codecs in streams are different\n        *   - switch occurs and codecs in streams are not different\n        */\n        eventBus.on(Events.PERIOD_SWITCH_STARTED, onPeriodSwitchStarted, instance);\n        eventBus.on(Events.STREAM_COMPLETED, onStreamCompleted, instance);\n        eventBus.on(Events.PERIOD_SWITCH_COMPLETED, onPeriodSwitchCompleted, instance);\n\n        resetInitialSettings();\n    }\n\n    function onPeriodSwitchStarted(e) {\n        if (previousPeriodSelectedTrack === undefined && e.fromStreamInfo !== null /* test if this is the first period */) {\n            previousPeriodSelectedTrack = this.getCurrentTrackIdx();\n        }\n    }\n\n    function onStreamCompleted() {\n        if (previousPeriodSelectedTrack === undefined) {\n            previousPeriodSelectedTrack = this.getCurrentTrackIdx();\n        }\n    }\n\n    function onPeriodSwitchCompleted() {\n        if (previousPeriodSelectedTrack !== undefined) {\n            this.setTextTrack(previousPeriodSelectedTrack);\n            previousPeriodSelectedTrack = undefined;\n        }\n    }\n\n    function setConfig(config) {\n        if (!config) {\n            return;\n        }\n        if (config.errHandler) {\n            errHandler = config.errHandler;\n        }\n        if (config.adapter) {\n            adapter = config.adapter;\n        }\n        if (config.manifestModel) {\n            manifestModel = config.manifestModel;\n        }\n        if (config.mediaController) {\n            mediaController = config.mediaController;\n        }\n        if (config.videoModel) {\n            videoModel = config.videoModel;\n        }\n        if (config.streamController) {\n            streamController = config.streamController;\n        }\n        if (config.textTracks) {\n            textTracks = config.textTracks;\n        }\n        if (config.vttParser) {\n            vttParser = config.vttParser;\n        }\n        if (config.ttmlParser) {\n            ttmlParser = config.ttmlParser;\n        }\n\n        // create config for source buffer\n        textSourceBuffer.setConfig({\n            errHandler: errHandler,\n            adapter: adapter,\n            manifestModel: manifestModel,\n            mediaController: mediaController,\n            videoModel: videoModel,\n            streamController: streamController,\n            textTracks: textTracks,\n            vttParser: vttParser,\n            ttmlParser: ttmlParser\n        });\n    }\n\n    function getTextSourceBuffer() {\n        return textSourceBuffer;\n    }\n\n    function getAllTracksAreDisabled() {\n        return allTracksAreDisabled;\n    }\n\n    function addEmbeddedTrack(mediaInfo) {\n        textSourceBuffer.addEmbeddedTrack(mediaInfo);\n    }\n\n    function setTextDefaultLanguage(lang) {\n        checkParameterType(lang, 'string');\n        if (!defaultSettings) {\n            defaultSettings = {};\n        }\n        defaultSettings.lang = lang;\n        initialSettingsSet = true;\n    }\n\n    function setInitialSettings(settings) {\n        defaultSettings = settings;\n        initialSettingsSet = true;\n    }\n\n    function getTextDefaultLanguage() {\n        return defaultSettings && defaultSettings.lang || '';\n    }\n\n    function onTextTracksAdded(e) {\n        let tracks = e.tracks;\n        let index = e.index;\n\n        if (defaultSettings) {\n            tracks.some((item, idx) => {\n                // matchSettings is compatible with setTextDefaultLanguage and setInitialSettings\n                if (mediaController.matchSettings(defaultSettings, item)) {\n                    this.setTextTrack(idx);\n                    index = idx;\n                    return true;\n                }\n            });\n        }\n\n        if (textDefaultEnabled === false || ( textDefaultEnabled === undefined && !defaultSettings ) || disableTextBeforeTextTracksAdded) {\n            // disable text at startup if explicitely configured with setTextDefaultEnabled(false) or if there is no defaultSettings (configuration or from domStorage)\n            this.setTextTrack(-1);\n        }\n\n        lastEnabledIndex = index;\n        eventBus.trigger(Events.TEXT_TRACKS_ADDED, {\n            enabled: isTextEnabled(),\n            index: index,\n            tracks: tracks\n        });\n        textTracksAdded = true;\n    }\n\n    function onCurrentTrackChanged(event) {\n        if (!initialSettingsSet && event && event.newMediaInfo) {\n            let mediaInfo = event.newMediaInfo;\n            if (mediaInfo.type === Constants.FRAGMENTED_TEXT) {\n                defaultSettings = {\n                    lang: mediaInfo.lang,\n                    role: mediaInfo.roles[0],\n                    accessibility: mediaInfo.accessibility[0]\n                };\n            }\n        }\n    }\n\n    function setTextDefaultEnabled(enable) {\n        checkParameterType(enable,'boolean');\n        textDefaultEnabled = enable;\n\n        if (!textDefaultEnabled) {\n            // disable text at startup\n            this.setTextTrack(-1);\n        } else {\n            allTracksAreDisabled = false;\n        }\n    }\n\n    function getTextDefaultEnabled() {\n        return textDefaultEnabled === undefined ? false : textDefaultEnabled;\n    }\n\n    function enableText(enable) {\n        checkParameterType(enable,'boolean');\n        if (!textDefaultEnabled && enable) {\n            textDefaultEnabled = true;\n        }\n        if (isTextEnabled() !== enable) {\n            // change track selection\n            if (enable) {\n                // apply last enabled track\n                this.setTextTrack(lastEnabledIndex);\n            }\n\n            if (!enable) {\n                // keep last index and disable text track\n                lastEnabledIndex = this.getCurrentTrackIdx();\n                if (!textTracksAdded) {\n                    disableTextBeforeTextTracksAdded = true;\n                } else {\n                    this.setTextTrack(-1);\n                }\n            }\n        }\n    }\n\n    function isTextEnabled() {\n        let enabled = true;\n        if (allTracksAreDisabled && !forceTextStreaming) {\n            enabled = false;\n        }\n        return enabled;\n    }\n\n    // when set to true ScheduleController will allow schedule of chunks even if tracks are all disabled. Allowing streaming to hidden track for external players to work with.\n    function enableForcedTextStreaming(enable) {\n        checkParameterType(enable,'boolean');\n        forceTextStreaming = enable;\n    }\n\n    function setTextTrack(idx) {\n        //For external time text file, the only action needed to change a track is marking the track mode to showing.\n        // Fragmented text tracks need the additional step of calling TextController.setTextTrack();\n        let config = textSourceBuffer.getConfig();\n        let fragmentModel = config.fragmentModel;\n        let fragmentedTracks = config.fragmentedTracks;\n        let videoModel = config.videoModel;\n        let mediaInfosArr,\n            streamProcessor;\n\n        allTracksAreDisabled = idx === -1 ? true : false;\n\n        let oldTrackIdx = textTracks.getCurrentTrackIdx();\n        if (oldTrackIdx !== idx) {\n            if (allTracksAreDisabled && mediaController) {\n                mediaController.saveTextSettingsDisabled();\n            }\n            textTracks.setModeForTrackIdx(oldTrackIdx, Constants.TEXT_HIDDEN);\n            textTracks.setCurrentTrackIdx(idx);\n            textTracks.setModeForTrackIdx(idx, Constants.TEXT_SHOWING);\n\n            let currentTrackInfo = textTracks.getCurrentTrackInfo();\n\n            if (currentTrackInfo && currentTrackInfo.isFragmented && !currentTrackInfo.isEmbedded) {\n                for (let i = 0; i < fragmentedTracks.length; i++) {\n                    let mediaInfo = fragmentedTracks[i];\n                    if (currentTrackInfo.lang === mediaInfo.lang && currentTrackInfo.index === mediaInfo.index &&\n                        (mediaInfo.id ? currentTrackInfo.id === mediaInfo.id : currentTrackInfo.id === mediaInfo.index)) {\n                        let currentFragTrack = mediaController.getCurrentTrackFor(Constants.FRAGMENTED_TEXT, streamController.getActiveStreamInfo());\n                        if (mediaInfo !== currentFragTrack) {\n                            fragmentModel.abortRequests();\n                            fragmentModel.removeExecutedRequestsBeforeTime();\n                            textSourceBuffer.remove();\n                            textTracks.deleteCuesFromTrackIdx(oldTrackIdx);\n                            mediaController.setTrack(mediaInfo);\n                            textSourceBuffer.setCurrentFragmentedTrackIdx(i);\n                        } else if (oldTrackIdx === -1) {\n                            //in fragmented use case, if the user selects the older track (the one selected before disabled text track)\n                            //no CURRENT_TRACK_CHANGED event will be trigger, so dashHandler current time has to be updated and the scheduleController\n                            //has to be restarted.\n                            const streamProcessors = streamController.getActiveStreamProcessors();\n                            for (let i = 0; i < streamProcessors.length; i++) {\n                                if (streamProcessors[i].getType() === Constants.FRAGMENTED_TEXT) {\n                                    streamProcessor = streamProcessors[i];\n                                    break;\n                                }\n                            }\n                            streamProcessor.setBufferingTime(videoModel.getTime());\n                            streamProcessor.getScheduleController().start();\n                        }\n                    }\n                }\n            } else if (currentTrackInfo && !currentTrackInfo.isFragmented) {\n                const streamProcessors = streamController.getActiveStreamProcessors();\n                for (let i = 0; i < streamProcessors.length; i++) {\n                    if (streamProcessors[i].getType() === Constants.TEXT) {\n                        streamProcessor = streamProcessors[i];\n                        mediaInfosArr = streamProcessor.getMediaInfoArr();\n                        break;\n                    }\n                }\n\n                if (streamProcessor && mediaInfosArr) {\n                    for (let i = 0; i < mediaInfosArr.length; i++) {\n                        if (mediaInfosArr[i].index === currentTrackInfo.index && mediaInfosArr[i].lang === currentTrackInfo.lang) {\n                            streamProcessor.selectMediaInfo(mediaInfosArr[i]);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    function getCurrentTrackIdx() {\n        return textTracks.getCurrentTrackIdx();\n    }\n\n    function resetInitialSettings() {\n        allTracksAreDisabled = true;\n        textTracksAdded = false;\n        disableTextBeforeTextTracksAdded = false;\n    }\n\n    function reset() {\n        resetInitialSettings();\n        textSourceBuffer.resetEmbedded();\n        textSourceBuffer.reset();\n    }\n\n    instance = {\n        setConfig: setConfig,\n        getTextSourceBuffer: getTextSourceBuffer,\n        getAllTracksAreDisabled: getAllTracksAreDisabled,\n        addEmbeddedTrack: addEmbeddedTrack,\n        getTextDefaultLanguage: getTextDefaultLanguage,\n        setTextDefaultLanguage: setTextDefaultLanguage,\n        setTextDefaultEnabled: setTextDefaultEnabled,\n        getTextDefaultEnabled: getTextDefaultEnabled,\n        setInitialSettings: setInitialSettings,\n        enableText: enableText,\n        isTextEnabled: isTextEnabled,\n        setTextTrack: setTextTrack,\n        getCurrentTrackIdx: getCurrentTrackIdx,\n        enableForcedTextStreaming: enableForcedTextStreaming,\n        reset: reset\n    };\n    setup();\n    return instance;\n}\n\nTextController.__dashjs_factory_name = 'TextController';\nexport default FactoryMaker.getSingletonFactory(TextController);\n"]}