{"version":3,"sources":["../../../../../src/streaming/net/URLLoader.js"],"names":["URLLoader","cfg","context","instance","schemeLoaderFactory","loader","getInstance","load","config","loaderFactory","getLoader","request","url","create","errHandler","mediaPlayerModel","requestModifier","useFetch","dashMetrics","boxParser","constants","dashConstants","urlUtils","errors","abort","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"sEA8BA,qD,yDACA,4E,0JAEA;;;;;EAjCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuCA,QAASA,UAAT,CAAmBC,GAAnB,CAAwB,CAEpBA,IAAMA,KAAO,EAAb,CACA,GAAMC,SAAU,KAAKA,OAArB,CAEA,GAAIC,gBAAJ,CACIC,0BADJ,CAEIC,aAFJ,CAIAD,oBAAsB,kCAAoBF,OAApB,EAA6BI,WAA7B,EAAtB,CAEA,QAASC,KAAT,CAAcC,MAAd,CAAsB,CAElB,GAAIC,eAAgBL,oBAAoBM,SAApB,CAA8BF,QAAUA,OAAOG,OAAjB,CAA2BH,OAAOG,OAAP,CAAeC,GAA1C,CAAgD,IAA9E,CAApB,CACAP,OAASI,cAAcP,OAAd,EAAuBW,MAAvB,CAA8B,CACnCC,WAAYb,IAAIa,UADmB,CAEnCC,iBAAkBd,IAAIc,gBAFa,CAGnCC,gBAAiBf,IAAIe,eAHc,CAInCC,SAAUhB,IAAIgB,QAAJ,EAAgB,IAJS,CAKnCC,YAAajB,IAAIiB,WALkB,CAMnCC,UAAWlB,IAAIkB,SAAJ,CAAgBlB,IAAIkB,SAApB,CAAgC,IANR,CAOnCC,UAAWnB,IAAImB,SAAJ,CAAgBnB,IAAImB,SAApB,CAAgC,IAPR,CAQnCC,cAAepB,IAAIoB,aAAJ,CAAoBpB,IAAIoB,aAAxB,CAAwC,IARpB,CASnCC,SAAUrB,IAAIqB,QAAJ,CAAerB,IAAIqB,QAAnB,CAA8B,IATL,CAUnCC,OAAQtB,IAAIsB,MAVuB,CAA9B,CAAT,CAaAlB,OAAOE,IAAP,CAAYC,MAAZ,EACH,CAED,QAASgB,MAAT,EAAiB,CACb,GAAInB,MAAJ,CAAY,CACRA,OAAOmB,KAAP,GACH,CACJ,CACDrB,SAAW,CACPI,KAAMA,IADC,CAEPiB,MAAOA,KAFA,CAAX,CAKA,MAAOrB,SAAP,CAEH,CACDH,UAAUyB,qBAAV,CAAkC,WAAlC,CAEA,GAAMC,SAAUC,uBAAaC,eAAb,CAA6B5B,SAA7B,CAAhB,C,gBACe0B,O","file":"URLLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport SchemeLoaderFactory from '../../streaming/net/SchemeLoaderFactory';\n\n/**\n * @class URLLoader\n * @description  Call Offline Loader or Online Loader dependaing on URL\n * @param {Object} cfg - dependances\n * @ignore\n*/\nfunction URLLoader(cfg) {\n\n    cfg = cfg || {};\n    const context = this.context;\n\n    let instance,\n        schemeLoaderFactory,\n        loader;\n\n    schemeLoaderFactory = SchemeLoaderFactory(context).getInstance();\n\n    function load(config) {\n\n        let loaderFactory = schemeLoaderFactory.getLoader(config && config.request ? config.request.url : null);\n        loader = loaderFactory(context).create({\n            errHandler: cfg.errHandler,\n            mediaPlayerModel: cfg.mediaPlayerModel,\n            requestModifier: cfg.requestModifier,\n            useFetch: cfg.useFetch || null,\n            dashMetrics: cfg.dashMetrics,\n            boxParser: cfg.boxParser ? cfg.boxParser : null,\n            constants: cfg.constants ? cfg.constants : null,\n            dashConstants: cfg.dashConstants ? cfg.dashConstants : null,\n            urlUtils: cfg.urlUtils ? cfg.urlUtils : null,\n            errors: cfg.errors\n        });\n\n        loader.load(config);\n    }\n\n    function abort() {\n        if (loader) {\n            loader.abort();\n        }\n    }\n    instance = {\n        load: load,\n        abort: abort\n    };\n\n    return instance;\n\n}\nURLLoader.__dashjs_factory_name = 'URLLoader';\n\nconst factory = FactoryMaker.getClassFactory(URLLoader);\nexport default factory;\n"]}