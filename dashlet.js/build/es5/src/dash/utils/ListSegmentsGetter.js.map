{"version":3,"sources":["../../../../../src/dash/utils/ListSegmentsGetter.js"],"names":["ListSegmentsGetter","config","isDynamic","timelineConverter","instance","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getSegmentByIndex","representation","index","list","adaptation","period","mpd","manifest","Period_asArray","AdaptationSet_asArray","Representation_asArray","SegmentList","len","SegmentURL_asArray","length","startNumber","isNaN","offsetToSubtract","Math","max","start","segment","s","replacementTime","segmentDuration","media","mediaRange","indexRange","availableSegmentsNumber","getSegmentByTime","requestedTime","duration","periodTime","calcPeriodRelativeTimeFromMpdRelativeTime","floor","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"mappings":"sEA+BA,qD,yDACA,8D,mDAEA,8C,mFAEA,QAASA,mBAAT,CAA4BC,MAA5B,CAAoCC,SAApC,CAA+C,CAE3CD,OAASA,QAAU,EAAnB,CACA,GAAME,mBAAoBF,OAAOE,iBAAjC,CAEA,GAAIC,gBAAJ,CAEA,QAASC,YAAT,EAAuB,CACnB,GAAI,CAACF,iBAAD,EAAsB,CAACA,kBAAkBG,cAAlB,CAAiC,2CAAjC,CAA3B,CAA0G,CACtG,KAAM,IAAIC,MAAJ,CAAUC,oBAAUC,oBAApB,CAAN,CACH,CACJ,CAED,QAASC,kBAAT,CAA2BC,cAA3B,CAA2CC,KAA3C,CAAkD,CAC9CP,cAEA,GAAI,CAACM,cAAL,CAAqB,CACjB,MAAO,KAAP,CACH,CAED,GAAME,MAAOF,eAAeG,UAAf,CAA0BC,MAA1B,CAAiCC,GAAjC,CAAqCC,QAArC,CAA8CC,cAA9C,CAA6DP,eAAeG,UAAf,CAA0BC,MAA1B,CAAiCH,KAA9F,EAAqGO,qBAArG,CAA2HR,eAAeG,UAAf,CAA0BF,KAArJ,EAA4JQ,sBAA5J,CAAmLT,eAAeC,KAAlM,EAAyMS,WAAtN,CACA,GAAMC,KAAMT,KAAKU,kBAAL,CAAwBC,MAApC,CAEA,GAAMC,aAAcd,gBAAkB,CAACe,MAAMf,eAAec,WAArB,CAAnB,CAAuDd,eAAec,WAAtE,CAAoF,CAAxG,CACA,GAAME,kBAAmBC,KAAKC,GAAL,CAASJ,YAAc,CAAvB,CAA0B,CAA1B,CAAzB,CAEA,GAAMK,OAAQnB,eAAec,WAA7B,CACA,GAAIM,SAAU,IAAd,CACA,GAAKnB,MAAQe,gBAAT,CAA6BL,GAAjC,CAAsC,CAClC,GAAMU,GAAInB,KAAKU,kBAAL,CAAwBX,MAAQe,gBAAhC,CAAV,CAEAI,QAAU,wCAAqB5B,iBAArB,CAAwCD,SAAxC,CAAmDS,cAAnD,CAAmEC,KAAnE,CAAV,CACA,GAAImB,OAAJ,CAAa,CACTA,QAAQE,eAAR,CAA0B,CAACH,MAAQlB,KAAR,CAAgB,CAAjB,EAAsBD,eAAeuB,eAA/D,CACAH,QAAQI,KAAR,CAAgBH,EAAEG,KAAF,CAAUH,EAAEG,KAAZ,CAAoB,EAApC,CACAJ,QAAQK,UAAR,CAAqBJ,EAAEI,UAAvB,CACAL,QAAQnB,KAAR,CAAgBA,KAAhB,CACAmB,QAAQM,UAAR,CAAqBL,EAAEK,UAAvB,CACH,CACJ,CAED1B,eAAe2B,uBAAf,CAAyChB,GAAzC,CAEA,MAAOS,QAAP,CACH,CAED,QAASQ,iBAAT,CAA0B5B,cAA1B,CAA0C6B,aAA1C,CAAyD,CACrDnC,cAEA,GAAI,CAACM,cAAL,CAAqB,CACjB,MAAO,KAAP,CACH,CAED,GAAM8B,UAAW9B,eAAeuB,eAAhC,CAEA,GAAIR,MAAMe,QAAN,CAAJ,CAAqB,CACjB,MAAO,KAAP,CACH,CAGD,GAAMC,YAAavC,kBAAkBwC,yCAAlB,CAA4DhC,cAA5D,CAA4E6B,aAA5E,CAAnB,CACA,GAAM5B,OAAQgB,KAAKgB,KAAL,CAAWF,WAAaD,QAAxB,CAAd,CAEA,MAAO/B,mBAAkBC,cAAlB,CAAkCC,KAAlC,CAAP,CACH,CAEDR,SAAW,CACPM,kBAAmBA,iBADZ,CAEP6B,iBAAkBA,gBAFX,CAAX,CAKA,MAAOnC,SAAP,CACH,CA5GD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8GAJ,mBAAmB6C,qBAAnB,CAA2C,oBAA3C,CACA,GAAMC,SAAUC,uBAAaC,eAAb,CAA6BhD,kBAA7B,CAAhB,C,gBACe8C,O","file":"ListSegmentsGetter.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../../streaming/constants/Constants';\n\nimport {getIndexBasedSegment} from './SegmentsUtils';\n\nfunction ListSegmentsGetter(config, isDynamic) {\n\n    config = config || {};\n    const timelineConverter = config.timelineConverter;\n\n    let instance;\n\n    function checkConfig() {\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getSegmentByIndex(representation, index) {\n        checkConfig();\n\n        if (!representation) {\n            return null;\n        }\n\n        const list = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;\n        const len = list.SegmentURL_asArray.length;\n\n        const startNumber = representation && !isNaN(representation.startNumber) ? representation.startNumber : 1;\n        const offsetToSubtract = Math.max(startNumber - 1, 0);\n\n        const start = representation.startNumber;\n        let segment = null;\n        if ((index - offsetToSubtract) < len) {\n            const s = list.SegmentURL_asArray[index - offsetToSubtract];\n\n            segment = getIndexBasedSegment(timelineConverter, isDynamic, representation, index);\n            if (segment) {\n                segment.replacementTime = (start + index - 1) * representation.segmentDuration;\n                segment.media = s.media ? s.media : '';\n                segment.mediaRange = s.mediaRange;\n                segment.index = index;\n                segment.indexRange = s.indexRange;\n            }\n        }\n\n        representation.availableSegmentsNumber = len;\n\n        return segment;\n    }\n\n    function getSegmentByTime(representation, requestedTime) {\n        checkConfig();\n\n        if (!representation) {\n            return null;\n        }\n\n        const duration = representation.segmentDuration;\n\n        if (isNaN(duration)) {\n            return null;\n        }\n\n\n        const periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\n        const index = Math.floor(periodTime / duration);\n\n        return getSegmentByIndex(representation, index);\n    }\n\n    instance = {\n        getSegmentByIndex: getSegmentByIndex,\n        getSegmentByTime: getSegmentByTime\n    };\n\n    return instance;\n}\n\nListSegmentsGetter.__dashjs_factory_name = 'ListSegmentsGetter';\nconst factory = FactoryMaker.getClassFactory(ListSegmentsGetter);\nexport default factory;\n"]}