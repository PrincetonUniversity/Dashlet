{"version":3,"sources":["../../../../../src/offline/net/IndexDBOfflineLoader.js"],"names":["IndexDBOfflineLoader","config","context","urlUtils","constants","dashConstants","instance","indexDBStore","setup","getInstance","getManifestId","url","myURL","removeHostname","parts","split","load","request","manifestId","mediaType","AUDIO","VIDEO","TEXT","MUXED","IMAGE","FRAGMENTED_TEXT","EMBEDDED_TEXT","suffix","type","index","key","representationId","getFragmentByKey","then","fragment","success","ARRAY_BUFFER","catch","err","error","MPD","getManifestById","item","createFragmentStore","fragmentStore","manifest","XML","abort","__dashjs_factory_name","factory","dashjs","FactoryMaker","getClassFactory"],"mappings":"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","file":"IndexDBOfflineLoader.js","sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport IndexDBStore from '../storage/IndexDBStore';\n\nfunction IndexDBOfflineLoader(config) {\n    config = config || {};\n    const context = this.context;\n    const urlUtils = config.urlUtils;\n    const constants = config.constants;\n    const dashConstants = config.dashConstants;\n\n    let instance,\n        indexDBStore;\n\n    function setup() {\n        indexDBStore = IndexDBStore(context).getInstance();\n    }\n\n    function getManifestId (url) {\n        let myURL = urlUtils.removeHostname(url);\n        var parts = myURL.split('/');\n        return parts[0];\n    }\n    /**\n     * Load manifest or fragment from indexeddb database\n     * @param {object} config configuration of request\n     */\n    function load(config) {\n        if (config.request) {\n            let manifestId = getManifestId(config.request.url);\n            if (manifestId % 1 === 0) {\n                if (\n                    config.request.mediaType === constants.AUDIO ||\n                    config.request.mediaType === constants.VIDEO ||\n                    config.request.mediaType === constants.TEXT ||\n                    config.request.mediaType === constants.MUXED ||\n                    config.request.mediaType === constants.IMAGE ||\n                    config.request.mediaType === constants.FRAGMENTED_TEXT ||\n                    config.request.mediaType === constants.EMBEDDED_TEXT\n                ) {\n                    let suffix = config.request.type === 'InitializationSegment' ? 'init' : config.request.index;\n                    let key = config.request.representationId + '_' + suffix;\n                    indexDBStore.getFragmentByKey(manifestId, key).then(function (fragment) {\n                        config.success(fragment, null, config.request.url, constants.ARRAY_BUFFER);\n                    }).catch(function (err) {\n                        config.error(err);\n                    });\n                } else if (config.request.type === dashConstants.MPD) {\n                    indexDBStore.getManifestById(manifestId).then(function (item) {\n                        indexDBStore.createFragmentStore(item.fragmentStore);\n                        config.success(item.manifest, null, config.request.url, constants.XML);\n                    }).catch(function (err) {\n                        config.error(config.request, 404, err);\n                    });\n                }\n            } else {\n                config.error(config.request, null, 'MediaType can not be found');\n            }\n        }\n    }\n\n    function abort() {\n        // nothing to do\n    }\n\n    setup();\n\n    instance = {\n        load: load,\n        abort: abort\n    };\n\n    return instance;\n}\n\nIndexDBOfflineLoader.__dashjs_factory_name = 'IndexDBOfflineLoader';\nconst factory = dashjs.FactoryMaker.getClassFactory(IndexDBOfflineLoader); /* jshint ignore:line */\nexport default factory;\n"]}