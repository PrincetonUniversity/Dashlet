{"version":3,"sources":["../../../../../src/offline/events/OfflineEvents.js"],"names":["OfflineEvents","OFFLINE_RECORD_LOADEDMETADATA","OFFLINE_RECORD_STARTED","OFFLINE_RECORD_STOPPED","OFFLINE_RECORD_FINISHED","EventsBase","offlineEvents"],"mappings":"sEAAA,2D,u7BACA;;;MAIMA,c,4DACF,wBAAe,qCAGX;;;UAHW,sHAOX,MAAKC,6BAAL,CAAqC,oCAArC,CAEA;;;UAIA,MAAKC,sBAAL,CAA8B,6BAA9B,CAEA;;;UAIA,MAAKC,sBAAL,CAA8B,6BAA9B,CAEA;;;UAIA,MAAKC,uBAAL,CAA+B,8BAA/B,CAzBW,aA0Bd,C,uBA3BuBC,oB,EA8B5B,GAAIC,eAAgB,GAAIN,cAAJ,EAApB,C,gBACeM,a","file":"OfflineEvents.js","sourcesContent":["import EventsBase from './../../core/events/EventsBase';\n/**\n * These are offline events that should be sent to the player level.\n * @class\n */\nclass OfflineEvents extends EventsBase {\n    constructor () {\n        super();\n\n        /**\n        * Triggered when all mediaInfo has been loaded\n        * @event OfflineEvents#OFFLINE_RECORD_LOADEDMETADATA\n        */\n        this.OFFLINE_RECORD_LOADEDMETADATA = 'public_offlineRecordLoadedmetadata';\n\n        /**\n        * Triggered when a record is initialized and download is started\n        * @event OfflineEvents#OFFLINE_RECORD_STARTED\n        */\n        this.OFFLINE_RECORD_STARTED = 'public_offlineRecordStarted';\n\n        /**\n        * Triggered when the user stop downloading a record\n        * @event OfflineEvents#OFFLINE_RECORD_STOPPED\n        */\n        this.OFFLINE_RECORD_STOPPED = 'public_offlineRecordStopped';\n\n        /**\n        * Triggered when all record has been downloaded\n        * @event OfflineEvents#OFFLINE_RECORD_FINISHED\n        */\n        this.OFFLINE_RECORD_FINISHED = 'public_offlineRecordFinished';\n    }\n}\n\nlet offlineEvents = new OfflineEvents();\nexport default offlineEvents;\n"]}