{"version":3,"file":"dojo2.js","sourceRoot":"","sources":["../../../src/loaders/dojo2.ts"],"names":[],"mappings":";;;;;;;;;;;;AAOA,MAAM,CAAC,cAAc,CAAC,UAAA,OAAO;IAC3B,IAAM,SAAS,GAAQ,OAAO,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;IAErE,IAAA,6BAAwD,EAAxD,6EAAwD,EACxD,oDAAe,CACL;IAEZ,OAAO,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC;QAC9C,IAAM,OAAO,GAA2B,SAAS,CAAC,OAAO,CAAC;QAC1D,MAAM,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAElC,YAAY,CAAC,OAAO,GAAG,YAAY,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;QACtE,MAAM,CAAC,GAAG,CAAC,0BAA0B,EAAE,YAAY,CAAC,CAAC;QACrD,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAE7B,OAAO,UAAC,OAAiB;YACvB,IAAI,MAA0B,CAAC;YAE/B,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;gBACjC,MAAM,GAAG,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,KAAY;oBACxC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;oBAC5B,MAAM,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;gBAEH,MAAM,CAAC,GAAG,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;gBACxC,OAAO,CAAC,OAAO,EAAE;oBACf,OAAO,EAAE,CAAC;gBACZ,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC,IAAI,CACL;gBACE,MAAM,CAAC,MAAM,EAAE,CAAC;YAClB,CAAC,EACD,UAAA,KAAK;gBACH,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;gBAC1B,MAAM,KAAK,CAAC;YACd,CAAC,CACF,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/// <reference types=\"@dojo/loader/interfaces\"/>\n\n/**\n * A loader script for setting up the Dojo loader.\n *\n * Note that loader scripts must be simple scripts, not modules.\n */\nintern.registerLoader(options => {\n  const globalObj: any = typeof window !== 'undefined' ? window : global;\n  const {\n    internLoaderPath = 'node_modules/@dojo/loader/loader.js',\n    ...loaderConfig\n  } = options;\n\n  return intern.loadScript(internLoaderPath).then(() => {\n    const require: DojoLoader.RootRequire = globalObj.require;\n    intern.log('Using Dojo 2 loader');\n\n    loaderConfig.baseUrl = loaderConfig.baseUrl || intern.config.basePath;\n    intern.log('Configuring loader with:', loaderConfig);\n    require.config(loaderConfig);\n\n    return (modules: string[]) => {\n      let handle: { remove(): void };\n\n      return new Promise((resolve, reject) => {\n        handle = require.on('error', (error: Error) => {\n          intern.emit('error', error);\n          reject(error);\n        });\n\n        intern.log('Loading modules:', modules);\n        require(modules, () => {\n          resolve();\n        });\n      }).then<void>(\n        () => {\n          handle.remove();\n        },\n        error => {\n          handle && handle.remove();\n          throw error;\n        }\n      );\n    };\n  });\n});\n"]}